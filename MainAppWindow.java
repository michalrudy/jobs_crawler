package com.mycompany.jobs_crawler;

/*


 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Timer
import java.util.TimerTask;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainAppWindow extends JFrame {

    private JButton startSpringButton;
    private JButton generatePdfButton;
    private JButton generateCsvButton;
    private JLabel lastUpdatedLabel;
    private JComboBox<String> cityComboBox;
    private JTextField companyTextField;
    private JTextField titleTextField;
    private final ScheduledTasks scheduledTasks;
    private final ApplicationContext ctx;
    private final JobService jobService;

    public MainAppWindow() {
        ctx = new AnnotationConfigApplicationContext(Application.class);
        scheduledTasks = ctx.getBean(ScheduledTasks.class);
        jobService = ctx.getBean(JobService.class);
        initUI();
        startAutoUpdate();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void initUI() {
        setTitle("Główne Okno Aplikacji");
        setSize(600, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        lastUpdatedLabel = new JLabel("Ostatnia aktualizacja: Nieznana");
        lastUpdatedLabel.setHorizontalAlignment(JLabel.CENTER);

        startSpringButton = new JButton("Uruchom JobInsight: Analizator Rynku Pracy");
        generatePdfButton = new JButton("GENEROWANIE RAPORTÓW PDF");
        generateCsvButton = new JButton("GENEROWANIE RAPORTÓW CSV");

        List<String> cities = jobService.getAllCities();
        cityComboBox = new JComboBox<>(cities.toArray(new String[0]));
        companyTextField = new JTextField();
        titleTextField = new JTextField();

        startSpringButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                startSpringBootApp();
            }
        });

        generatePdfButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generateFilteredPdfReport();
            }
        });

        generateCsvButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                generateFilteredCsvReport();
            }
        });

        JPanel topPanel = new JPanel(new BorderLayout());
        topPanel.add(lastUpdatedLabel, BorderLayout.NORTH);
        topPanel.add(startSpringButton, BorderLayout.CENTER);

        JPanel reportButtonPanel = new JPanel();
        reportButtonPanel.setLayout(new GridLayout(2, 1, 10, 10));
        reportButtonPanel.add(generatePdfButton);
        reportButtonPanel.add(generateCsvButton);

        JPanel filterPanel = new JPanel();
        filterPanel.setLayout(new GridLayout(3, 2, 10, 10));
        filterPanel.add(new JLabel("Wybierz miasto:"));
        filterPanel.add(cityComboBox);
        filterPanel.add(new JLabel("Nazwa firmy:"));
        filterPanel.add(companyTextField);
        filterPanel.add(new JLabel("Stanowisko:"));
        filterPanel.add(titleTextField);

        panel.add(topPanel, BorderLayout.NORTH);
        panel.add(reportButtonPanel, BorderLayout.CENTER);
        panel.add(filterPanel, BorderLayout.SOUTH);

        add(panel);
    }

    private void startSpringBootApp() {
        Thread springThread = new Thread(() -> {
            com.mycompany.jobs_crawler.Application.main(new String[]{});
            SwingUtilities.invokeLater(this::updateLastUpdatedLabel);
        });
        springThread.setDaemon(true);
        springThread.start();
    }

    private void startAutoUpdate() {
        Timer timer = new Timer(true);
        TimerTask updateTask = new TimerTask() {
            @Override
            public void run() {
                SwingUtilities.invokeLater(MainAppWindow.this::updateLastUpdatedLabel);
            }
        };
        timer.scheduleAtFixedRate(updateTask, 0, 60000); // Update every 60 seconds
    }

    private void updateLastUpdatedLabel() {
        LocalDateTime lastScrapeTime = Application.getLastScrapeTime();
        LocalDateTime lastScheduledTaskRunTime = scheduledTasks.getLastRunTime();
        String lastUpdateText = "Ostatnia aktualizacja: ";

        if (lastScrapeTime != null) {
            lastUpdateText += "Scraping: " + lastScrapeTime.toString();
        } else {
            lastUpdateText += "Scraping: Nieznana";
        }

        if (lastScheduledTaskRunTime != null) {
            lastUpdateText += ", Scheduled Task: " + lastScheduledTaskRunTime.toString();
        } else {
            lastUpdateText += ", Scheduled Task: Nieznana";
        }

        lastUpdatedLabel.setText(lastUpdateText);
    }

    private void generateFilteredPdfReport() {
        String selectedCity = (String) cityComboBox.getSelectedItem();
        String company = companyTextField.getText();
        String title = titleTextField.getText();
        jobService.generateFilteredPdfReport(
            selectedCity.equals("none") ? null : selectedCity,
            company.isEmpty() ? null : company,
            title.isEmpty() ? null : title
        );
        JOptionPane.showMessageDialog(this, "Raport PDF został wygenerowany.");
    }

    private void generateFilteredCsvReport() {
        String selectedCity = (String) cityComboBox.getSelectedItem();
        String company = companyTextField.getText();
        String title = titleTextField.getText();
        jobService.generateFilteredCsvReport(
            selectedCity.equals("none") ? null : selectedCity,
            company.isEmpty() ? null : company,
            title.isEmpty() ? null : title
        );
        JOptionPane.showMessageDialog(this, "Raport CSV został wygenerowany.");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MainAppWindow appWindow = new MainAppWindow();
            appWindow.setVisible(true);
        });
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

